<% layout('layouts/boilerplate') %>

<div class="row">
  <h1 class="text-center">New Campground</h1>
  <div class="col-6 offset-3">
    <form
      action="/campgrounds"
      method="POST"
      novalidate
      class="validated-form"
      enctype="multipart/form-data"
    >
      <!-- we set enctype above to be able to upload files, which we have seen the same type in urlencoded=true thing in app.use  -->

      <!--novalidate is used for bootstrap to take reigns over from normal stuff, it actually sets everything to not validate even if it is set to 'required'-->
      <div class="mb-3">
        <label class="form-label" for="title">Title</label>
        <input
          class="form-control"
          type="text"
          id="title"
          name="campground[title]"
          required
        />
        <div class="valid-feedback">Looks good!</div>
      </div>
      <%/* If we do, name="campground[title]" then the parsing of the form data
      in Express will make the value available in the backend route under
      req.body.campground.title Similarly, name="campground[location]" will be
      made available under req.body.campground.location in the route to which
      the form was submitted. That way we can directly pass the
      req.body.campground object in the create/POST route in a really clear and
      explicit way (req.body.campground would be the campground object we
      constructed on req.body that contains the property names that match the
      property names from the model schema, so mongoose/MongoDB knows under
      which properties to save the values automatically). That specific name
      attribute syntax (with the square brackets construct) is related to the
      urlencoded extended option that we set in in our app code, you can read
      more */%>
      <div class="mb-3">
        <label class="form-label" for="location">Location</label>
        <input
          class="form-control"
          type="text"
          id="location"
          name="campground[location]"
          required
        />
        <div class="valid-feedback">Looks good!</div>
      </div>

      <!--attribute multiple lets multiple files be uploaded-->

      <!-- <div class="mb-3">
        <label class="form-label" for="image">Image Url</label>
        <input
          class="form-control"
          type="text"
          id="image"
          name="campground[image]"
          required
        />
        <div class="valid-feedback">Looks good!</div>
      </div> -->

      <div class="mb-3">
        <label class="form-label" for="price">Campground Price</label>
        <div class="input-group">
          <span class="input-group-text" id="price-label">$</span>
          <input
            type="text"
            class="form-control"
            id="price"
            placeholder="0.00"
            aria-label="price"
            aria-describedby="price-label"
            name="campground[price]"
            required
          />
        </div>
      </div>

      <div class="mb-3">
        <label class="form-label" for="description">Description</label>
        <textarea
          class="form-control"
          type="text"
          id="description"
          name="campground[description]"
          required
        ></textarea>
        <div class="valid-feedback">Looks good!</div>
      </div>
      <div class="mb-3">
        <label for="image" class="form-label">Upload Images</label>
        <input
          class="form-control"
          type="file"
          id="image"
          name="image"
          multiple
        />
      </div>
      <div class="mb-3">
        <button class="btn btn-success">Add Campground</button>
      </div>
    </form>
    <a href="/campgrounds">All campgrounds</a>
  </div>
</div>

<%# IN BOILERPLATE
<script>
  (() => {
    "use strict";

    // Fetch all the forms we want to apply custom Bootstrap validation styles to
    const forms = document.querySelectorAll(".validated-form");

    // Loop over them and prevent submission
    //from from(forms) converts all off the forms to array by slicing them
    Array.from(forms).forEach((form) => {
      form.addEventListener(
        "submit",
        (event) => {
          //checkvalidity() is a method
          if (!form.checkValidity()) {
            event.preventDefault();
            event.stopPropagation();
          }

          form.classList.add("was-validated");
        },
        false
      );
    });
  })();
</script>
%>
